{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e88ca3b-adcc-41a6-abbc-a755b0f25593",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Explain with an example each when to use a for loop and a while loop.\n",
    "\n",
    "#for loop-When we know the number of iterations that must occur in a loop execution, we use the for loop. \n",
    "#while loop-if we do not know how many iterations must occur in a loop, we use a while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b257b597-d9bf-4732-8e95-4d5949fd9b89",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=['raj' ,'mishra']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d9f0468d-c458-4336-931a-11c6f0cb67ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raj\n",
      "mishra\n"
     ]
    }
   ],
   "source": [
    "for i in l:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3eb98b13-34b5-440f-b745-747f4bc9b921",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "a=1\n",
    "while a<=10:\n",
    "    print(a)\n",
    "    a=a+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fe44a5ac-fcca-4030-8ce7-625c9ccade78",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to filter count vowels in the below-given string.\n",
    " \"I want to become a data scientist\"\n",
    "#string ="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bef776fd-2b07-4d47-aca6-0216b392dcb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no of vowels : 11\n"
     ]
    }
   ],
   "source": [
    "def vowel_count(Str):\n",
    "    count=0\n",
    "   \n",
    "    vowel=set('aeiou')\n",
    "    for i in str:\n",
    "        if i in vowel:\n",
    "            count=count+1\n",
    "    print('no of vowels :', count)\n",
    "    \n",
    "str= \"I want to become a data scientist\"\n",
    "\n",
    "vowel_count(str)\n",
    "           \n",
    "   \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4fc4490b-e7cd-446b-9bb1-97476fb60c3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "w#rite a python program to print the sum and product of the first 10 natural numbers using for\n",
    "#and while loop."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "583bd194-00f6-47be-b825-d5dc14b3ea11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum of first 10 natural number is: 55\n"
     ]
    }
   ],
   "source": [
    "sum=0\n",
    "for i in range(1,11):\n",
    "    sum=sum+i\n",
    "print('sum of first 10 natural number is:' , sum)\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "37d26d5c-cfc2-4027-936f-c310db2ac615",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sum 55\n"
     ]
    }
   ],
   "source": [
    "sum=0\n",
    "i =1\n",
    "while i<=10:\n",
    "    sum +=i\n",
    "    i =i+1\n",
    "print('sum',sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "b56d45ae-8b50-4d45-8085-8c4f7497c3a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product of first 10 natural no: 3628800\n"
     ]
    }
   ],
   "source": [
    "prod=1\n",
    "for i in range(1,11):\n",
    "    \n",
    "    prod=prod*i\n",
    "print('product of first 10 natural no:', prod)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "25088c42-8719-4cf5-ba95-3b441e5d90c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product: 3628800\n"
     ]
    }
   ],
   "source": [
    "prod=1\n",
    "i=1\n",
    "while i<=10:\n",
    "    prod=prod*i\n",
    "    i=i+1\n",
    "print('product:',prod)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9056db1d-809e-4d72-94b2-5695e4be8e4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=list(range(1,101))\n",
    "l1=[]\n",
    "for i in l:\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        l1.append(i**3)\n",
    "     \n",
    "\n",
    "       \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a5e20f9b-cf4f-43b3-a916-d2083438fc7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 8,\n",
       " 27,\n",
       " 64,\n",
       " 125,\n",
       " 216,\n",
       " 343,\n",
       " 512,\n",
       " 729,\n",
       " 1000,\n",
       " 1331,\n",
       " 1728,\n",
       " 2197,\n",
       " 2744,\n",
       " 3375,\n",
       " 4096,\n",
       " 4913,\n",
       " 5832,\n",
       " 6859,\n",
       " 8000,\n",
       " 9261,\n",
       " 10648,\n",
       " 12167,\n",
       " 13824,\n",
       " 15625,\n",
       " 17576,\n",
       " 19683,\n",
       " 21952,\n",
       " 24389,\n",
       " 27000,\n",
       " 29791,\n",
       " 32768,\n",
       " 35937,\n",
       " 39304,\n",
       " 42875,\n",
       " 46656,\n",
       " 50653,\n",
       " 54872,\n",
       " 59319,\n",
       " 64000,\n",
       " 68921,\n",
       " 74088,\n",
       " 79507,\n",
       " 85184,\n",
       " 91125,\n",
       " 97336,\n",
       " 103823,\n",
       " 110592,\n",
       " 117649,\n",
       " 125000,\n",
       " 132651,\n",
       " 140608,\n",
       " 148877,\n",
       " 157464,\n",
       " 166375,\n",
       " 175616,\n",
       " 185193,\n",
       " 195112,\n",
       " 205379,\n",
       " 216000,\n",
       " 226981,\n",
       " 238328,\n",
       " 250047,\n",
       " 262144,\n",
       " 274625,\n",
       " 287496,\n",
       " 300763,\n",
       " 314432,\n",
       " 328509,\n",
       " 343000,\n",
       " 357911,\n",
       " 373248,\n",
       " 389017,\n",
       " 405224,\n",
       " 421875,\n",
       " 438976,\n",
       " 456533,\n",
       " 474552,\n",
       " 493039,\n",
       " 512000,\n",
       " 531441,\n",
       " 551368,\n",
       " 571787,\n",
       " 592704,\n",
       " 614125,\n",
       " 636056,\n",
       " 658503,\n",
       " 681472,\n",
       " 704969,\n",
       " 729000,\n",
       " 753571,\n",
       " 778688,\n",
       " 804357,\n",
       " 830584,\n",
       " 857375,\n",
       " 884736,\n",
       " 912673,\n",
       " 941192,\n",
       " 970299,\n",
       " 1000000]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "91830435-c0d1-4b69-85d1-2804bb44c3ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=list(range(1,101))\n",
    "l1=[]\n",
    "for i in l:\n",
    "    if i%4==0:\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        l1.append(i**3)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a813996f-69da-48aa-a29d-62cff0c18441",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[64,\n",
       " 512,\n",
       " 1728,\n",
       " 4096,\n",
       " 8000,\n",
       " 13824,\n",
       " 21952,\n",
       " 32768,\n",
       " 46656,\n",
       " 64000,\n",
       " 85184,\n",
       " 110592,\n",
       " 140608,\n",
       " 175616,\n",
       " 216000,\n",
       " 262144,\n",
       " 314432,\n",
       " 373248,\n",
       " 438976,\n",
       " 512000,\n",
       " 592704,\n",
       " 681472,\n",
       " 778688,\n",
       " 884736,\n",
       " 1000000]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "07d0916f-a87c-4251-90ec-dec0539d7c02",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=list(range(1,101))\n",
    "l1=[]\n",
    "for i in l:\n",
    "    if i %5==0:\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        l1.append(i**3)\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4114d0e2-f823-4d1c-831a-fcff6006af5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[125,\n",
       " 1000,\n",
       " 3375,\n",
       " 8000,\n",
       " 15625,\n",
       " 27000,\n",
       " 42875,\n",
       " 64000,\n",
       " 91125,\n",
       " 125000,\n",
       " 166375,\n",
       " 216000,\n",
       " 274625,\n",
       " 343000,\n",
       " 421875,\n",
       " 512000,\n",
       " 614125,\n",
       " 729000,\n",
       " 857375,\n",
       " 1000000]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d4f839c1-08e1-40be-bb35-c08cc33aea31",
   "metadata": {},
   "outputs": [],
   "source": [
    "#for electric bill question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d0320462-8f11-43c5-a960-120803a13474",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your number 310\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2250.0\n"
     ]
    }
   ],
   "source": [
    "n=int(input(\"enter your number\"))\n",
    "\n",
    "if (n<101):\n",
    "    print(4.5*100)\n",
    "elif (n<201):\n",
    "    print(6*200)\n",
    "elif (n<301):\n",
    "    print(10*300)\n",
    "elif (n>300):\n",
    "    print(20*112.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1bffa9a-a323-4c7a-84ff-75f1fea7cb84",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

